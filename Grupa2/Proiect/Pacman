#include <iostream>
#include <cstdlib>
#include <ctime>
#include <vector>

#ifdef _WIN32
    #include <conio.h>
#else
    #include <termios.h>
    #include <unistd.h>
    #include <fcntl.h>

    int kbhit() {
        struct termios oldt, newt;
        int ch;
        int oldf;

        tcgetattr(STDIN_FILENO, &oldt);
        newt = oldt;
        newt.c_lflag &= ~(ICANON | ECHO);
        tcsetattr(STDIN_FILENO, TCSANOW, &newt);
        oldf = fcntl(STDIN_FILENO, F_GETFL, 0);
        fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK);

        ch = getchar();

        tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
        fcntl(STDIN_FILENO, F_SETFL, oldf);

        if (ch != EOF) {
            ungetc(ch, stdin);
            return 1;
        }

        return 0;
    }

    char getch() {
        char buf = 0;
        struct termios old = {};
        if (tcgetattr(0, &old) < 0)
            perror("tcsetattr()");
        old.c_lflag &= ~ICANON;
        old.c_lflag &= ~ECHO;
        old.c_cc[VMIN] = 1;
        old.c_cc[VTIME] = 0;
        if (tcsetattr(0, TCSANOW, &old) < 0)
            perror("tcsetattr ICANON");
        if (read(0, &buf, 1) < 0)
            perror("read()");
        old.c_lflag |= ICANON;
        old.c_lflag |= ECHO;
        if (tcsetattr(0, TCSADRAIN, &old) < 0)
            perror("tcsetattr ~ICANON");
        return buf;
    }
#endif

using namespace std;

const int width = 20;
const int height = 10;
char map[height][width + 1] = {
    "###################",
    "#.................#",
    "#.#####.#####.####",
    "#.................#",
    "###.###.#.###.###.#",
    "#.................#",
    "#.###.#####.###.##",
    "#.................#",
    "#.###############.#",
    "###################"
};

int pacX = 1, pacY = 1;
int score = 0;
bool gameOver = false;

struct Ghost {
    int x, y;
};

vector<Ghost> ghosts = { {18, 1}, {1, 8} };

void drawMap() {
#ifdef _WIN32
    system("cls");
#else
    system("clear");
#endif
    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            if (x == pacX && y == pacY)
                cout << 'C';
            else {
                bool ghostDrawn = false;
                for (auto& g : ghosts)
                    if (g.x == x && g.y == y) {
                        cout << 'G';
                        ghostDrawn = true;
                        break;
                    }
                if (!ghostDrawn)
                    cout << map[y][x];
            }
        }
        cout << endl;
    }
    cout << "Scor: " << score << endl;
    cout << "Taste: W A S D = miscare | Q = iesire" << endl;
}

bool isGameOver() {
    for (auto& g : ghosts)
        if (g.x == pacX && g.y == pacY)
            return true;

    for (int y = 0; y < height; y++)
        for (int x = 0; x < width; x++)
            if (map[y][x] == '.')
                return false;

    return false;
}

void move(char direction) {
    int newX = pacX;
    int newY = pacY;

    if (direction == 'w') newY--;
    else if (direction == 's') newY++;
    else if (direction == 'a') newX--;
    else if (direction == 'd') newX++;

    if (map[newY][newX] != '#') {
        pacX = newX;
        pacY = newY;
        if (map[pacY][pacX] == '.') {
            score++;
            map[pacY][pacX] = ' ';
        }
    }
}

void moveGhosts() {
    for (auto& g : ghosts) {
        int dir = rand() % 4;
        int newX = g.x;
        int newY = g.y;

        if (dir == 0) newY--;
        else if (dir == 1) newY++;
        else if (dir == 2) newX--;
        else if (dir == 3) newX++;

        if (map[newY][newX] != '#' && !(newX == pacX && newY == pacY)) {
            g.x = newX;
            g.y = newY;
        }
    }
}

void menu() {
    cout << "======================" << endl;
    cout << "     PAC-MAN C++      " << endl;
    cout << "======================" << endl;
    cout << "1. Start joc" << endl;
    cout << "2. Iesire" << endl;
    cout << "Alege o optiune: ";
    char opt;
    cin >> opt;
    if (opt != '1')
        exit(0);
}

int main() {
    srand((unsigned)time(0));
    menu();

    while (!gameOver) {
        drawMap();
#ifdef _WIN32
        if (_kbhit()) {
            char input = tolower(_getch());
#else
        if (kbhit()) {
            char input = tolower(getch());
#endif
            if (input == 'q') break;
            move(input);
        }

        moveGhosts();
        gameOver = isGameOver();
    }

    drawMap();
    if (score == 0 || (pacX == ghosts[0].x && pacY == ghosts[0].y))
        cout << "Ai fost prins! Game Over." << endl;
    else
        cout << "Ai castigat! Scor final: " << score << endl;

    return 0;
}
