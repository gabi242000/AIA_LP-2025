Tema 1: 

Ex 1: 

#include <stdio.h>

// Schimbă două valori din vector
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Funcție de partitionare pentru quicksort
int partition(int v[], int low, int high) {
    int pivot = v[high];
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (v[j] < pivot) {
            i++;
            swap(&v[i], &v[j]);
        }
    }
    swap(&v[i + 1], &v[high]);
    return i + 1;
}

// Funcția de quicksort
void sortareVector(int v[], int low, int high) {
    if (low < high) {
        int pi = partition(v, low, high);
        sortareVector(v, low, pi - 1);
        sortareVector(v, pi + 1, high);
    }
}

// Căutare binară într-un vector sortat
int cautareBinara(int v[], int n, int x) {
    int st = 0, dr = n - 1;
    while (st <= dr) {
        int mij = (st + dr) / 2;
        if (v[mij] == x)
            return mij; // găsit
        else if (v[mij] < x)
            st = mij + 1;
        else
            dr = mij - 1;
    }
    return -1; // nu s-a găsit
}

int main() {
    int v[100], n, x;

    printf("Introdu numarul de elemente: ");
    scanf("%d", &n);

    printf("Introdu elementele vectorului:\n");
    for (int i = 0; i < n; i++) {
        printf("v[%d] = ", i);
        scanf("%d", &v[i]);
    }

    sortareVector(v, 0, n - 1);

    printf("\nVectorul sortat este:\n");
    for (int i = 0; i < n; i++)
        printf("%d ", v[i]);

    printf("\n\nCe valoare vrei sa cauti? ");
    scanf("%d", &x);

    int poz = cautareBinara(v, n, x);
    if (poz != -1)
        printf("Elementul %d a fost gasit la pozitia %d.\n", x, poz);
    else
        printf("Elementul %d NU a fost gasit in vector.\n", x);

    return 0;
}


Ex 2 :

#include <stdio.h>
#include <math.h>

#define N 10

// Eliminare Gauss pentru determinant
float determinant(float m[N][N], int n) {
    float temp[N][N];
    float det = 1;

    // Copiem matricea pentru a nu modifica originalul
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            temp[i][j] = m[i][j];

    for (int i = 0; i < n; i++) {
        // Dacă pivotul este 0, căutăm o linie de schimb
        if (fabs(temp[i][i]) < 1e-6) {
            int schimb = -1;
            for (int j = i + 1; j < n; j++) {
                if (fabs(temp[j][i]) > 1e-6) {
                    schimb = j;
                    break;
                }
            }
            if (schimb == -1)
                return 0; // determinantul e zero

            // schimbă liniile
            for (int k = 0; k < n; k++) {
                float aux = temp[i][k];
                temp[i][k] = temp[schimb][k];
                temp[schimb][k] = aux;
            }
            det *= -1; // schimbarea liniilor => inversare semn
        }

        // Eliminare pentru linia curentă
        for (int j = i + 1; j < n; j++) {
            float f = temp[j][i] / temp[i][i];
            for (int k = i; k < n; k++) {
                temp[j][k] -= f * temp[i][k];
            }
        }

        det *= temp[i][i];
    }

    return det;
}

// Verifică inversabilitatea (dacă det ≠ 0)
int esteInversabila(float m[N][N], int n) {
    float det = determinant(m, n);
    return fabs(det) > 1e-6;
}

int main() {
    float matrice[N][N];
    int n;

    printf("Introdu dimensiunea matricei patratice (n): ");
    scanf("%d", &n);

    printf("Introdu elementele matricei (%dx%d):\n", n, n);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) {
            printf("matrice[%d][%d] = ", i, j);
            scanf("%f", &matrice[i][j]);
        }

    float det = determinant(matrice, n);
    printf("\nDeterminantul matricei este: %.2f\n", det);

    if (esteInversabila(matrice, n))
        printf("Matricea ESTE inversabila.\n");
    else
        printf("Matricea NU este inversabila.\n");

    return 0;
}

Ex3 :

#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Criptează șirul folosind cifrul Caesar
void cripteaza(char s[], int key) {
    for (int i = 0; s[i]; i++) {
        if (isalpha(s[i])) {
            char baza = isupper(s[i]) ? 'A' : 'a';
            s[i] = (s[i] - baza + key) % 26 + baza;
        }
    }
}

// Decriptează șirul folosind aceeași cheie
void decripteaza(char s[], int key) {
    for (int i = 0; s[i]; i++) {
        if (isalpha(s[i])) {
            char baza = isupper(s[i]) ? 'A' : 'a';
            s[i] = (s[i] - baza - key + 26) % 26 + baza;
        }
    }
}

int main() {
    char mesaj[256];
    int cheie;

    printf("Introdu mesajul (fara spatii): ");
    scanf("%s", mesaj); // pentru simplitate, fara spatii

    printf("Introdu cheia de criptare (numar): ");
    scanf("%d", &cheie);

    // Facem o copie pentru a păstra originalul
    char criptat[256], decriptat[256];
    strcpy(criptat, mesaj);
    strcpy(decriptat, mesaj);

    // Criptare
    cripteaza(criptat, cheie);
    printf("Mesaj criptat: %s\n", criptat);

    // Decriptare
    decripteaza(criptat, cheie); // folosim direct șirul criptat
    printf("Mesaj decriptat: %s\n", criptat);

    return 0;
}
Tema 2:


Ex1:

#include <stdio.h>

int main() {
    float pret, pret_final;
    int cod;

    printf("Introdu pretul produsului: ");
    scanf("%f", &pret);

    printf("Introdu codul de reducere (1, 2 sau 3): ");
    scanf("%d", &cod);

    switch (cod) {
        case 1:
            pret_final = pret * 0.9;
            printf("Reducere 10%% aplicata. Pret final: %.2f\n", pret_final);
            break;
        case 2:
            pret_final = pret * 0.8;
            printf("Reducere 20%% aplicata. Pret final: %.2f\n", pret_final);
            break;
        case 3:
            pret_final = pret * 0.7;
            printf("Reducere 30%% aplicata. Pret final: %.2f\n", pret_final);
            break;
        default:
            printf("Cod invalid! Nu s-a aplicat nicio reducere.\n");
    }

    return 0;
}

#include <stdio.h>

int main() {
    float salariu_brut, salariu_net;
    int cod_contract;
    float impozit;

    printf("Introdu salariul brut: ");
    scanf("%f", &salariu_brut);

    printf("Introdu codul tipului de contract (1 - full-time, 2 - colaborare, 3 - PFA): ");
    scanf("%d", &cod_contract);

    switch (cod_contract) {
        case 1:
            impozit = 0.25;
            break;
        case 2:
            impozit = 0.10;
            break;
        case 3:
            impozit = 0.05;
            break;
        default:
            printf("Cod invalid! Nu se poate calcula salariul net.\n");
            return 1;
    }

    salariu_net = salariu_brut - (salariu_brut * impozit);
    printf("Salariul net este: %.2f\n", salariu_net);

    return 0;
}
Tema 3 :

#include <stdio.h>

int main() {
    int optiune;
    float a, b, rezultat;

    do {
        // 1. Afișare meniu
        printf("\n=== Calculator Simplu ===\n");
        printf("1. Adunare\n");
        printf("2. Scadere\n");
        printf("3. Inmultire\n");
        printf("4. Impartire\n");
        printf("5. Iesire\n");
        printf("Alege o optiune: ");
        scanf("%d", &optiune);

        // 2. Verificare opțiune
        if (optiune >= 1 && optiune <= 4) {
            printf("Introdu primul numar: ");
            scanf("%f", &a);
            printf("Introdu al doilea numar: ");
            scanf("%f", &b);
        }

        // 3. Executare operație
        switch (optiune) {
            case 1:
                rezultat = a + b;
                printf("Rezultatul adunarii: %.2f\n", rezultat);
                break;
            case 2:
                rezultat = a - b;
                printf("Rezultatul scaderii: %.2f\n", rezultat);
                break;
            case 3:
                rezultat = a * b;
                printf("Rezultatul inmultirii: %.2f\n", rezultat);
                break;
            case 4:
                if (b == 0)
                    printf("Eroare: impartire la zero!\n");
                else {
                    rezultat = a / b;
                    printf("Rezultatul impartirii: %.2f\n", rezultat);
                }
                break;
            case 5:
                printf("Ai ales iesirea. La revedere!\n");
                break;
            default:
                printf("Optiune invalida! Te rog alege intre 1 si 5.\n");
        }

    } while (optiune != 5); // 6. Repetare până la ieșire

    return 0;
}
Tema 4:

Ex1: 

#include <stdio.h>
#include <string.h>

int main() {
    char cuvant[100];
    int x, y;

    printf("Introdu un cuvant: ");
    scanf("%s", cuvant);

    printf("Introdu pozitiile x si y: ");
    scanf("%d %d", &x, &y);

    int len = strlen(cuvant);
    if (x >= 0 && y >= 0 && x < len && y < len) {
        char temp = cuvant[x];
        cuvant[x] = cuvant[y];
        cuvant[y] = temp;
        printf("Cuvant modificat: %s\n", cuvant);
    } else {
        printf("Pozitii invalide!\n");
    }

    return 0;
}

Ex2:

#include <stdio.h>
#include <string.h>

int main() {
    char cuvant[100];
    int x, y;

    printf("Introdu un cuvant: ");
    scanf("%s", cuvant);

    printf("Introdu pozitiile x si y: ");
    scanf("%d %d", &x, &y);

    int len = strlen(cuvant);
    if (x >= 0 && y >= 0 && x < len && y < len) {
        char temp = cuvant[x];
        cuvant[x] = cuvant[y];
        cuvant[y] = temp;
        printf("Cuvant modificat: %s\n", cuvant);
    } else {
        printf("Pozitii invalide!\n");
    }

    return 0;
}

Ex3:

#include <stdio.h>
#include <string.h>
#include <ctype.h>

int esteVocala(char c) {
    return strchr("aeiouAEIOU", c) != NULL;
}

int esteCuvantFrumos(const char* cuv) {
    int len = strlen(cuv);

    if (tolower(cuv[0]) != 'z') return 0;
    if (len % 2 != 0) return 0;

    for (int i = 0; i < len; i++) {
        if (i % 2 == 0 && esteVocala(cuv[i])) return 0;  // par = consoana
        if (i % 2 == 1 && !esteVocala(cuv[i])) return 0; // impar = vocala
    }
    return 1;
}

int main() {
    char cuvant[100];

    printf("Introdu un cuvant: ");
    scanf("%s", cuvant);

    if (esteCuvantFrumos(cuvant))
        printf("Cuvantul este frumos.\n");
    else
        printf("Cuvantul NU este frumos.\n");

    return 0;
}

Ex4:

#include <stdio.h>
#include <string.h>
#include <ctype.h>

void cripteazaCaesar(char s[], int p) {
    for (int i = 0; s[i]; i++) {
        if (isupper(s[i]))
            s[i] = 'A' + (s[i] - 'A' + p) % 26;
        else if (islower(s[i]))
            s[i] = 'a' + (s[i] - 'a' + p) % 26;
    }
}

int main() {
    char sir[256];
    int p;

    printf("Introdu textul de criptat: ");
    fgets(sir, sizeof(sir), stdin);

    printf("Introdu valoarea p: ");
    scanf("%d", &p);

    cripteazaCaesar(sir, p);
    printf("Text criptat: %s\n", sir);

    return 0;
}
Tema 5:
Ex1:

#include <stdio.h>
#include <stdlib.h>

int main() {
    int n;
    printf("Introdu numarul de elemente: ");
    scanf("%d", &n);

    int *v = (int *)malloc(n * sizeof(int));
    if (!v) {
        printf("Eroare la alocare.\n");
        return 1;
    }

    float suma = 0;
    for (int i = 0; i < n; i++) {
        printf("v[%d] = ", i);
        scanf("%d", &v[i]);
        suma += v[i];
    }

    float media = suma / n;
    printf("Media aritmetica: %.2f\n", media);

    // Numărăm câte sunt >= media
    int contor = 0;
    for (int i = 0; i < n; i++)
        if (v[i] >= media)
            contor++;

    int *rezultat = (int *)malloc(contor * sizeof(int));
    int j = 0;
    for (int i = 0; i < n; i++)
        if (v[i] >= media)
            rezultat[j++] = v[i];

    printf("Elementele >= media: ");
    for (int i = 0; i < contor; i++)
        printf("%d ", rezultat[i]);
    printf("\n");

    free(v);
    free(rezultat);
    return 0;
}

Ex2:

#include <stdio.h>
#include <stdlib.h>

int main() {
    int n;
    printf("Introdu numarul de elemente: ");
    scanf("%d", &n);

    int *v1 = (int *)malloc(n * sizeof(int));
    int *v2 = (int *)malloc(n * sizeof(int));

    if (!v1 || !v2) {
        printf("Eroare la alocare.\n");
        return 1;
    }

    for (int i = 0; i < n; i++) {
        printf("v1[%d] = ", i);
        scanf("%d", &v1[i]);
    }

    // Inversare
    for (int i = 0; i < n; i++)
        v2[i] = v1[n - 1 - i];

    printf("Vector original: ");
    for (int i = 0; i < n; i++)
        printf("%d ", v1[i]);

    printf("\nVector inversat: ");
    for (int i = 0; i < n; i++)
        printf("%d ", v2[i]);

    free(v1);
    free(v2);
    return 0;
}

Ex3:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    char *s1 = (char *)malloc(100 * sizeof(char));
    char *s2 = (char *)malloc(100 * sizeof(char));

    if (!s1 || !s2) {
        printf("Eroare alocare.\n");
        return 1;
    }

    printf("Introdu primul sir: ");
    fgets(s1, 100, stdin);
    s1[strcspn(s1, "\n")] = '\0';

    printf("Introdu al doilea sir: ");
    fgets(s2, 100, stdin);
    s2[strcspn(s2, "\n")] = '\0';

    int len = strlen(s1) + strlen(s2) + 1;
    char *rezultat = (char *)malloc(len * sizeof(char));

    strcpy(rezultat, s1);
    strcat(rezultat, s2);

    printf("Concatenare: %s\n", rezultat);

    free(s1);
    free(s2);
    free(rezultat);
    return 0;
}

Ex4:

#include <stdio.h>
#include <stdlib.h>

int main() {
    int n;
    printf("Introdu dimensiunea N: ");
    scanf("%d", &n);

    int *mat = (int *)malloc(n * sizeof(int *));
    for (int i = 0; i < n; i++)
        mat[i] = (int *)calloc(n, sizeof(int)); // inițial toți cu 0

    for (int i = 0; i < n; i++)
        mat[i][i] = 1; // diagonala principală

    printf("Matrice identitate %dx%d:\n", n, n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
            printf("%d ", mat[i][j]);
        printf("\n");
    }

    for (int i = 0; i < n; i++)
        free(mat[i]);
    free(mat);

    return 0;
}
Tema6:

Ex1:

#include <stdio.h>

// Funcție recursivă care afișează cifrele în ordine inversă
void invers(int n) {
    if (n == 0) return;
    printf("%d", n % 10);  // Afișează ultima cifră
    invers(n / 10);        // Recursiv pe restul numărului
}

int main() {
    int n;
    printf("Introdu un numar: ");
    scanf("%d", &n);

    if (n == 0)
        printf("0");
    else
        invers(n);

    return 0;
}

Ex2:

#include <stdio.h>

// Funcție recursivă pentru calculul CMMD folosind algoritmul lui Euclid
int cmmdc(int a, int b) {
    if (b == 0)
        return a;
    return cmmdc(b, a % b);
}

int main() {
    int a, b;
    printf("Introdu doua numere: ");
    scanf("%d %d", &a, &b);

    int rezultat = cmmdc(a, b);
    printf("Cel mai mare divizor comun este: %d\n", rezultat);

    return 0;
}
