//Exercitiul 4:
#include <stdio.h>
#include <stdlib.h>

int main() {
    int N, i, count = 0;
    float media = 0;

    printf("Introdu numarul de elemente: ");
    scanf("%d", &N);

    int *v = (int *)malloc(N * sizeof(int));
    if (v == NULL) {
        printf("Eroare la alocarea memoriei.\n");
        return 1;
    }

    printf("Introdu elementele:\n");
    for (i = 0; i < N; i++) {
        scanf("%d", &v[i]);
        media += v[i];
    }
    media /= N;

    for (i = 0; i < N; i++) {
        if (v[i] >= media)
            count++;
    }

    int *nou = (int *)malloc(count * sizeof(int));
    if (nou == NULL) {
        printf("Eroare la alocarea noului vector.\n");
        free(v);
        return 1;
    }

    int j = 0;
    for (i = 0; i < N; i++) {
        if (v[i] >= media)
            nou[j++] = v[i];
    }

    printf("Elementele mai mari sau egale cu media (%.2f):\n", media);
    for (i = 0; i < count; i++)
        printf("%d ", nou[i]);
    printf("\n");

    free(v);
    free(nou);
    return 0;
}

//Exercitiul 5:
#include <stdio.h>
#include <stdlib.h>

int main() {
    int N, i;
    printf("Introdu numarul de elemente: ");
    scanf("%d", &N);

    int *v1 = (int *)malloc(N * sizeof(int));
    int *v2 = (int *)malloc(N * sizeof(int));

    if (v1 == NULL || v2 == NULL) {
        printf("Eroare la alocarea memoriei.\n");
        return 1;
    }

    printf("Introdu elementele:\n");
    for (i = 0; i < N; i++) {
        scanf("%d", &v1[i]);
    }

    for (i = 0; i < N; i++) {
        v2[i] = v1[N - i - 1];
    }

    printf("Vector original: ");
    for (i = 0; i < N; i++)
        printf("%d ", v1[i]);

    printf("\nVector inversat: ");
    for (i = 0; i < N; i++)
        printf("%d ", v2[i]);

    printf("\n");

    free(v1);
    free(v2);
    return 0;
}

//Exercitiul 6:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    char *s1, *s2, *concat;
    int len1, len2;

    s1 = (char *)malloc(100 * sizeof(char));
    s2 = (char *)malloc(100 * sizeof(char));

    if (s1 == NULL || s2 == NULL) {
        printf("Eroare la alocare.\n");
        return 1;
    }

    printf("Introdu primul sir: ");
    scanf("%s", s1);
    printf("Introdu al doilea sir: ");
    scanf("%s", s2);

    len1 = strlen(s1);
    len2 = strlen(s2);

    concat = (char *)malloc((len1 + len2 + 1) * sizeof(char));
    if (concat == NULL) {
        printf("Eroare la alocare concatenare.\n");
        free(s1); free(s2);
        return 1;
    }

    strcpy(concat, s1);
    strcat(concat, s2);

    printf("Sirul concatenat: %s\n", concat);

    free(s1);
    free(s2);
    free(concat);
    return 0;
}

//Exercitiul 7: nu stiu sa il rezolv